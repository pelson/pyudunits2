# Generated by ANTLR 4.11.1
# encoding: utf-8
from pyudunits2._grammar._antlr4_runtime import *
import sys

if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,
        1,
        27,
        159,
        2,
        0,
        7,
        0,
        2,
        1,
        7,
        1,
        2,
        2,
        7,
        2,
        2,
        3,
        7,
        3,
        2,
        4,
        7,
        4,
        2,
        5,
        7,
        5,
        2,
        6,
        7,
        6,
        2,
        7,
        7,
        7,
        2,
        8,
        7,
        8,
        2,
        9,
        7,
        9,
        2,
        10,
        7,
        10,
        1,
        0,
        3,
        0,
        24,
        8,
        0,
        1,
        0,
        1,
        0,
        1,
        1,
        1,
        1,
        1,
        1,
        3,
        1,
        31,
        8,
        1,
        1,
        1,
        1,
        1,
        3,
        1,
        35,
        8,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        3,
        1,
        41,
        8,
        1,
        1,
        1,
        1,
        1,
        3,
        1,
        45,
        8,
        1,
        1,
        1,
        1,
        1,
        3,
        1,
        49,
        8,
        1,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        4,
        2,
        64,
        8,
        2,
        11,
        2,
        12,
        2,
        65,
        1,
        2,
        5,
        2,
        69,
        8,
        2,
        10,
        2,
        12,
        2,
        72,
        9,
        2,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        3,
        3,
        85,
        8,
        3,
        1,
        4,
        1,
        4,
        1,
        4,
        1,
        4,
        1,
        4,
        3,
        4,
        92,
        8,
        4,
        1,
        5,
        1,
        5,
        1,
        5,
        1,
        5,
        1,
        5,
        1,
        5,
        3,
        5,
        100,
        8,
        5,
        1,
        6,
        1,
        6,
        1,
        7,
        1,
        7,
        3,
        7,
        106,
        8,
        7,
        1,
        8,
        1,
        8,
        3,
        8,
        110,
        8,
        8,
        1,
        8,
        1,
        8,
        3,
        8,
        114,
        8,
        8,
        1,
        8,
        3,
        8,
        117,
        8,
        8,
        1,
        8,
        1,
        8,
        3,
        8,
        121,
        8,
        8,
        1,
        8,
        1,
        8,
        3,
        8,
        125,
        8,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        3,
        8,
        130,
        8,
        8,
        1,
        8,
        1,
        8,
        3,
        8,
        134,
        8,
        8,
        1,
        8,
        1,
        8,
        3,
        8,
        138,
        8,
        8,
        1,
        8,
        1,
        8,
        3,
        8,
        142,
        8,
        8,
        1,
        8,
        3,
        8,
        145,
        8,
        8,
        1,
        8,
        3,
        8,
        148,
        8,
        8,
        1,
        9,
        1,
        9,
        1,
        9,
        3,
        9,
        153,
        8,
        9,
        1,
        10,
        1,
        10,
        3,
        10,
        157,
        8,
        10,
        1,
        10,
        0,
        1,
        4,
        11,
        0,
        2,
        4,
        6,
        8,
        10,
        12,
        14,
        16,
        18,
        20,
        0,
        3,
        2,
        0,
        1,
        1,
        9,
        9,
        2,
        0,
        18,
        18,
        26,
        26,
        1,
        0,
        20,
        21,
        186,
        0,
        23,
        1,
        0,
        0,
        0,
        2,
        48,
        1,
        0,
        0,
        0,
        4,
        50,
        1,
        0,
        0,
        0,
        6,
        84,
        1,
        0,
        0,
        0,
        8,
        91,
        1,
        0,
        0,
        0,
        10,
        99,
        1,
        0,
        0,
        0,
        12,
        101,
        1,
        0,
        0,
        0,
        14,
        105,
        1,
        0,
        0,
        0,
        16,
        147,
        1,
        0,
        0,
        0,
        18,
        152,
        1,
        0,
        0,
        0,
        20,
        156,
        1,
        0,
        0,
        0,
        22,
        24,
        3,
        2,
        1,
        0,
        23,
        22,
        1,
        0,
        0,
        0,
        23,
        24,
        1,
        0,
        0,
        0,
        24,
        25,
        1,
        0,
        0,
        0,
        25,
        26,
        5,
        0,
        0,
        1,
        26,
        1,
        1,
        0,
        0,
        0,
        27,
        49,
        3,
        4,
        2,
        0,
        28,
        30,
        3,
        4,
        2,
        0,
        29,
        31,
        5,
        18,
        0,
        0,
        30,
        29,
        1,
        0,
        0,
        0,
        30,
        31,
        1,
        0,
        0,
        0,
        31,
        32,
        1,
        0,
        0,
        0,
        32,
        34,
        5,
        12,
        0,
        0,
        33,
        35,
        5,
        18,
        0,
        0,
        34,
        33,
        1,
        0,
        0,
        0,
        34,
        35,
        1,
        0,
        0,
        0,
        35,
        36,
        1,
        0,
        0,
        0,
        36,
        37,
        3,
        14,
        7,
        0,
        37,
        49,
        1,
        0,
        0,
        0,
        38,
        40,
        3,
        4,
        2,
        0,
        39,
        41,
        5,
        18,
        0,
        0,
        40,
        39,
        1,
        0,
        0,
        0,
        40,
        41,
        1,
        0,
        0,
        0,
        41,
        42,
        1,
        0,
        0,
        0,
        42,
        44,
        5,
        12,
        0,
        0,
        43,
        45,
        5,
        18,
        0,
        0,
        44,
        43,
        1,
        0,
        0,
        0,
        44,
        45,
        1,
        0,
        0,
        0,
        45,
        46,
        1,
        0,
        0,
        0,
        46,
        47,
        3,
        16,
        8,
        0,
        47,
        49,
        1,
        0,
        0,
        0,
        48,
        27,
        1,
        0,
        0,
        0,
        48,
        28,
        1,
        0,
        0,
        0,
        48,
        38,
        1,
        0,
        0,
        0,
        49,
        3,
        1,
        0,
        0,
        0,
        50,
        51,
        6,
        2,
        -1,
        0,
        51,
        52,
        3,
        6,
        3,
        0,
        52,
        70,
        1,
        0,
        0,
        0,
        53,
        54,
        10,
        4,
        0,
        0,
        54,
        69,
        3,
        6,
        3,
        0,
        55,
        56,
        10,
        3,
        0,
        0,
        56,
        57,
        5,
        3,
        0,
        0,
        57,
        69,
        3,
        6,
        3,
        0,
        58,
        59,
        10,
        2,
        0,
        0,
        59,
        60,
        5,
        4,
        0,
        0,
        60,
        69,
        3,
        6,
        3,
        0,
        61,
        63,
        10,
        1,
        0,
        0,
        62,
        64,
        5,
        18,
        0,
        0,
        63,
        62,
        1,
        0,
        0,
        0,
        64,
        65,
        1,
        0,
        0,
        0,
        65,
        63,
        1,
        0,
        0,
        0,
        65,
        66,
        1,
        0,
        0,
        0,
        66,
        67,
        1,
        0,
        0,
        0,
        67,
        69,
        3,
        6,
        3,
        0,
        68,
        53,
        1,
        0,
        0,
        0,
        68,
        55,
        1,
        0,
        0,
        0,
        68,
        58,
        1,
        0,
        0,
        0,
        68,
        61,
        1,
        0,
        0,
        0,
        69,
        72,
        1,
        0,
        0,
        0,
        70,
        68,
        1,
        0,
        0,
        0,
        70,
        71,
        1,
        0,
        0,
        0,
        71,
        5,
        1,
        0,
        0,
        0,
        72,
        70,
        1,
        0,
        0,
        0,
        73,
        74,
        3,
        8,
        4,
        0,
        74,
        75,
        3,
        12,
        6,
        0,
        75,
        85,
        1,
        0,
        0,
        0,
        76,
        85,
        3,
        8,
        4,
        0,
        77,
        78,
        3,
        8,
        4,
        0,
        78,
        79,
        5,
        14,
        0,
        0,
        79,
        80,
        3,
        12,
        6,
        0,
        80,
        85,
        1,
        0,
        0,
        0,
        81,
        82,
        3,
        8,
        4,
        0,
        82,
        83,
        5,
        13,
        0,
        0,
        83,
        85,
        1,
        0,
        0,
        0,
        84,
        73,
        1,
        0,
        0,
        0,
        84,
        76,
        1,
        0,
        0,
        0,
        84,
        77,
        1,
        0,
        0,
        0,
        84,
        81,
        1,
        0,
        0,
        0,
        85,
        7,
        1,
        0,
        0,
        0,
        86,
        92,
        3,
        10,
        5,
        0,
        87,
        88,
        5,
        15,
        0,
        0,
        88,
        89,
        3,
        2,
        1,
        0,
        89,
        90,
        5,
        7,
        0,
        0,
        90,
        92,
        1,
        0,
        0,
        0,
        91,
        86,
        1,
        0,
        0,
        0,
        91,
        87,
        1,
        0,
        0,
        0,
        92,
        9,
        1,
        0,
        0,
        0,
        93,
        100,
        5,
        16,
        0,
        0,
        94,
        95,
        5,
        6,
        0,
        0,
        95,
        96,
        3,
        2,
        1,
        0,
        96,
        97,
        5,
        7,
        0,
        0,
        97,
        100,
        1,
        0,
        0,
        0,
        98,
        100,
        3,
        14,
        7,
        0,
        99,
        93,
        1,
        0,
        0,
        0,
        99,
        94,
        1,
        0,
        0,
        0,
        99,
        98,
        1,
        0,
        0,
        0,
        100,
        11,
        1,
        0,
        0,
        0,
        101,
        102,
        7,
        0,
        0,
        0,
        102,
        13,
        1,
        0,
        0,
        0,
        103,
        106,
        3,
        12,
        6,
        0,
        104,
        106,
        5,
        11,
        0,
        0,
        105,
        103,
        1,
        0,
        0,
        0,
        105,
        104,
        1,
        0,
        0,
        0,
        106,
        15,
        1,
        0,
        0,
        0,
        107,
        110,
        5,
        25,
        0,
        0,
        108,
        110,
        3,
        12,
        6,
        0,
        109,
        107,
        1,
        0,
        0,
        0,
        109,
        108,
        1,
        0,
        0,
        0,
        110,
        148,
        1,
        0,
        0,
        0,
        111,
        114,
        5,
        25,
        0,
        0,
        112,
        114,
        3,
        12,
        6,
        0,
        113,
        111,
        1,
        0,
        0,
        0,
        113,
        112,
        1,
        0,
        0,
        0,
        114,
        116,
        1,
        0,
        0,
        0,
        115,
        117,
        7,
        1,
        0,
        0,
        116,
        115,
        1,
        0,
        0,
        0,
        116,
        117,
        1,
        0,
        0,
        0,
        117,
        118,
        1,
        0,
        0,
        0,
        118,
        120,
        3,
        18,
        9,
        0,
        119,
        121,
        5,
        18,
        0,
        0,
        120,
        119,
        1,
        0,
        0,
        0,
        120,
        121,
        1,
        0,
        0,
        0,
        121,
        124,
        1,
        0,
        0,
        0,
        122,
        125,
        3,
        20,
        10,
        0,
        123,
        125,
        5,
        20,
        0,
        0,
        124,
        122,
        1,
        0,
        0,
        0,
        124,
        123,
        1,
        0,
        0,
        0,
        124,
        125,
        1,
        0,
        0,
        0,
        125,
        148,
        1,
        0,
        0,
        0,
        126,
        129,
        3,
        12,
        6,
        0,
        127,
        130,
        3,
        20,
        10,
        0,
        128,
        130,
        5,
        20,
        0,
        0,
        129,
        127,
        1,
        0,
        0,
        0,
        129,
        128,
        1,
        0,
        0,
        0,
        129,
        130,
        1,
        0,
        0,
        0,
        130,
        148,
        1,
        0,
        0,
        0,
        131,
        133,
        5,
        27,
        0,
        0,
        132,
        134,
        5,
        18,
        0,
        0,
        133,
        132,
        1,
        0,
        0,
        0,
        133,
        134,
        1,
        0,
        0,
        0,
        134,
        137,
        1,
        0,
        0,
        0,
        135,
        138,
        3,
        20,
        10,
        0,
        136,
        138,
        5,
        20,
        0,
        0,
        137,
        135,
        1,
        0,
        0,
        0,
        137,
        136,
        1,
        0,
        0,
        0,
        137,
        138,
        1,
        0,
        0,
        0,
        138,
        148,
        1,
        0,
        0,
        0,
        139,
        142,
        5,
        25,
        0,
        0,
        140,
        142,
        3,
        12,
        6,
        0,
        141,
        139,
        1,
        0,
        0,
        0,
        141,
        140,
        1,
        0,
        0,
        0,
        142,
        144,
        1,
        0,
        0,
        0,
        143,
        145,
        5,
        18,
        0,
        0,
        144,
        143,
        1,
        0,
        0,
        0,
        144,
        145,
        1,
        0,
        0,
        0,
        145,
        146,
        1,
        0,
        0,
        0,
        146,
        148,
        7,
        2,
        0,
        0,
        147,
        109,
        1,
        0,
        0,
        0,
        147,
        113,
        1,
        0,
        0,
        0,
        147,
        126,
        1,
        0,
        0,
        0,
        147,
        131,
        1,
        0,
        0,
        0,
        147,
        141,
        1,
        0,
        0,
        0,
        148,
        17,
        1,
        0,
        0,
        0,
        149,
        153,
        5,
        22,
        0,
        0,
        150,
        153,
        5,
        23,
        0,
        0,
        151,
        153,
        3,
        12,
        6,
        0,
        152,
        149,
        1,
        0,
        0,
        0,
        152,
        150,
        1,
        0,
        0,
        0,
        152,
        151,
        1,
        0,
        0,
        0,
        153,
        19,
        1,
        0,
        0,
        0,
        154,
        157,
        5,
        23,
        0,
        0,
        155,
        157,
        3,
        12,
        6,
        0,
        156,
        154,
        1,
        0,
        0,
        0,
        156,
        155,
        1,
        0,
        0,
        0,
        157,
        21,
        1,
        0,
        0,
        0,
        26,
        23,
        30,
        34,
        40,
        44,
        48,
        65,
        68,
        70,
        84,
        91,
        99,
        105,
        109,
        113,
        116,
        120,
        124,
        129,
        133,
        137,
        141,
        144,
        147,
        152,
        156,
    ]


class udunits2Parser(Parser):
    grammarFileName = "udunits2Parser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [DFA(ds, i) for i, ds in enumerate(atn.decisionToState)]

    sharedContextCache = PredictionContextCache()

    literalNames = [
        "<INVALID>",
        "<INVALID>",
        "'+'",
        "<INVALID>",
        "<INVALID>",
        "'.'",
        "'('",
        "')'",
        "':'",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "'TZ'",
        "<INVALID>",
        "<INVALID>",
        "'-'",
        "<INVALID>",
        "'T'",
    ]

    symbolicNames = [
        "<INVALID>",
        "SIGNED_INT",
        "PLUS",
        "MULTIPLY",
        "DIVIDE",
        "PERIOD",
        "OPEN_PAREN",
        "CLOSE_PAREN",
        "SEMICOLON",
        "INT",
        "E_POWER",
        "FLOAT",
        "SHIFT_OP",
        "UNICODE_EXPONENT",
        "RAISE",
        "LOG",
        "ID",
        "LATIN_SUBSET",
        "WS",
        "ERRORCHARACTER",
        "TIMEZONE",
        "TZ",
        "HOUR_MINUTE_SECOND",
        "HOUR_MINUTE",
        "M_MINUS",
        "DATE",
        "T",
        "TIMESTAMP",
    ]

    RULE_unit_spec = 0
    RULE_shift_spec = 1
    RULE_product = 2
    RULE_power = 3
    RULE_logarithm = 4
    RULE_basic_spec = 5
    RULE_integer = 6
    RULE_number = 7
    RULE_timestamp = 8
    RULE_signed_clock = 9
    RULE_timezone_offset = 10

    ruleNames = [
        "unit_spec",
        "shift_spec",
        "product",
        "power",
        "logarithm",
        "basic_spec",
        "integer",
        "number",
        "timestamp",
        "signed_clock",
        "timezone_offset",
    ]

    EOF = Token.EOF
    SIGNED_INT = 1
    PLUS = 2
    MULTIPLY = 3
    DIVIDE = 4
    PERIOD = 5
    OPEN_PAREN = 6
    CLOSE_PAREN = 7
    SEMICOLON = 8
    INT = 9
    E_POWER = 10
    FLOAT = 11
    SHIFT_OP = 12
    UNICODE_EXPONENT = 13
    RAISE = 14
    LOG = 15
    ID = 16
    LATIN_SUBSET = 17
    WS = 18
    ERRORCHARACTER = 19
    TIMEZONE = 20
    TZ = 21
    HOUR_MINUTE_SECOND = 22
    HOUR_MINUTE = 23
    M_MINUS = 24
    DATE = 25
    T = 26
    TIMESTAMP = 27

    def __init__(self, input: TokenStream, output: TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = ParserATNSimulator(
            self, self.atn, self.decisionsToDFA, self.sharedContextCache
        )
        self._predicates = None

    class Unit_specContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(udunits2Parser.EOF, 0)

        def shift_spec(self):
            return self.getTypedRuleContext(udunits2Parser.Shift_specContext, 0)

        def getRuleIndex(self):
            return udunits2Parser.RULE_unit_spec

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitUnit_spec"):
                return visitor.visitUnit_spec(self)
            else:
                return visitor.visitChildren(self)

    def unit_spec(self):
        localctx = udunits2Parser.Unit_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_unit_spec)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 23
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3F) == 0 and ((1 << _la) & 100930) != 0:
                self.state = 22
                self.shift_spec()

            self.state = 25
            self.match(udunits2Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Shift_specContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def product(self):
            return self.getTypedRuleContext(udunits2Parser.ProductContext, 0)

        def SHIFT_OP(self):
            return self.getToken(udunits2Parser.SHIFT_OP, 0)

        def number(self):
            return self.getTypedRuleContext(udunits2Parser.NumberContext, 0)

        def WS(self, i: int = None):
            if i is None:
                return self.getTokens(udunits2Parser.WS)
            else:
                return self.getToken(udunits2Parser.WS, i)

        def timestamp(self):
            return self.getTypedRuleContext(udunits2Parser.TimestampContext, 0)

        def getRuleIndex(self):
            return udunits2Parser.RULE_shift_spec

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitShift_spec"):
                return visitor.visitShift_spec(self)
            else:
                return visitor.visitChildren(self)

    def shift_spec(self):
        localctx = udunits2Parser.Shift_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_shift_spec)
        self._la = 0  # Token type
        try:
            self.state = 48
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 5, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 27
                self.product(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 28
                self.product(0)
                self.state = 30
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 18:
                    self.state = 29
                    self.match(udunits2Parser.WS)

                self.state = 32
                self.match(udunits2Parser.SHIFT_OP)
                self.state = 34
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 18:
                    self.state = 33
                    self.match(udunits2Parser.WS)

                self.state = 36
                self.number()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 38
                self.product(0)
                self.state = 40
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 18:
                    self.state = 39
                    self.match(udunits2Parser.WS)

                self.state = 42
                self.match(udunits2Parser.SHIFT_OP)
                self.state = 44
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 18:
                    self.state = 43
                    self.match(udunits2Parser.WS)

                self.state = 46
                self.timestamp()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProductContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def power(self):
            return self.getTypedRuleContext(udunits2Parser.PowerContext, 0)

        def product(self):
            return self.getTypedRuleContext(udunits2Parser.ProductContext, 0)

        def MULTIPLY(self):
            return self.getToken(udunits2Parser.MULTIPLY, 0)

        def DIVIDE(self):
            return self.getToken(udunits2Parser.DIVIDE, 0)

        def WS(self, i: int = None):
            if i is None:
                return self.getTokens(udunits2Parser.WS)
            else:
                return self.getToken(udunits2Parser.WS, i)

        def getRuleIndex(self):
            return udunits2Parser.RULE_product

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitProduct"):
                return visitor.visitProduct(self)
            else:
                return visitor.visitChildren(self)

    def product(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = udunits2Parser.ProductContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 4
        self.enterRecursionRule(localctx, 4, self.RULE_product, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 51
            self.power()
            self._ctx.stop = self._input.LT(-1)
            self.state = 70
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 8, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 68
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 7, self._ctx)
                    if la_ == 1:
                        localctx = udunits2Parser.ProductContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_product
                        )
                        self.state = 53
                        if not self.precpred(self._ctx, 4):
                            from pyudunits2._grammar._antlr4_runtime.error.Errors import (
                                FailedPredicateException,
                            )

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 4)"
                            )
                        self.state = 54
                        self.power()
                        pass

                    elif la_ == 2:
                        localctx = udunits2Parser.ProductContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_product
                        )
                        self.state = 55
                        if not self.precpred(self._ctx, 3):
                            from pyudunits2._grammar._antlr4_runtime.error.Errors import (
                                FailedPredicateException,
                            )

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 3)"
                            )
                        self.state = 56
                        self.match(udunits2Parser.MULTIPLY)
                        self.state = 57
                        self.power()
                        pass

                    elif la_ == 3:
                        localctx = udunits2Parser.ProductContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_product
                        )
                        self.state = 58
                        if not self.precpred(self._ctx, 2):
                            from pyudunits2._grammar._antlr4_runtime.error.Errors import (
                                FailedPredicateException,
                            )

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 2)"
                            )
                        self.state = 59
                        self.match(udunits2Parser.DIVIDE)
                        self.state = 60
                        self.power()
                        pass

                    elif la_ == 4:
                        localctx = udunits2Parser.ProductContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_product
                        )
                        self.state = 61
                        if not self.precpred(self._ctx, 1):
                            from pyudunits2._grammar._antlr4_runtime.error.Errors import (
                                FailedPredicateException,
                            )

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 1)"
                            )
                        self.state = 63
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 62
                            self.match(udunits2Parser.WS)
                            self.state = 65
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la == 18):
                                break

                        self.state = 67
                        self.power()
                        pass

                self.state = 72
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 8, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class PowerContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logarithm(self):
            return self.getTypedRuleContext(udunits2Parser.LogarithmContext, 0)

        def integer(self):
            return self.getTypedRuleContext(udunits2Parser.IntegerContext, 0)

        def RAISE(self):
            return self.getToken(udunits2Parser.RAISE, 0)

        def UNICODE_EXPONENT(self):
            return self.getToken(udunits2Parser.UNICODE_EXPONENT, 0)

        def getRuleIndex(self):
            return udunits2Parser.RULE_power

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPower"):
                return visitor.visitPower(self)
            else:
                return visitor.visitChildren(self)

    def power(self):
        localctx = udunits2Parser.PowerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_power)
        try:
            self.state = 84
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 9, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 73
                self.logarithm()
                self.state = 74
                self.integer()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 76
                self.logarithm()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 77
                self.logarithm()
                self.state = 78
                self.match(udunits2Parser.RAISE)
                self.state = 79
                self.integer()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 81
                self.logarithm()
                self.state = 82
                self.match(udunits2Parser.UNICODE_EXPONENT)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LogarithmContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def basic_spec(self):
            return self.getTypedRuleContext(udunits2Parser.Basic_specContext, 0)

        def LOG(self):
            return self.getToken(udunits2Parser.LOG, 0)

        def shift_spec(self):
            return self.getTypedRuleContext(udunits2Parser.Shift_specContext, 0)

        def CLOSE_PAREN(self):
            return self.getToken(udunits2Parser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return udunits2Parser.RULE_logarithm

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLogarithm"):
                return visitor.visitLogarithm(self)
            else:
                return visitor.visitChildren(self)

    def logarithm(self):
        localctx = udunits2Parser.LogarithmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_logarithm)
        try:
            self.state = 91
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 6, 9, 11, 16]:
                self.enterOuterAlt(localctx, 1)
                self.state = 86
                self.basic_spec()
                pass
            elif token in [15]:
                self.enterOuterAlt(localctx, 2)
                self.state = 87
                self.match(udunits2Parser.LOG)
                self.state = 88
                self.shift_spec()
                self.state = 89
                self.match(udunits2Parser.CLOSE_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Basic_specContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(udunits2Parser.ID, 0)

        def OPEN_PAREN(self):
            return self.getToken(udunits2Parser.OPEN_PAREN, 0)

        def shift_spec(self):
            return self.getTypedRuleContext(udunits2Parser.Shift_specContext, 0)

        def CLOSE_PAREN(self):
            return self.getToken(udunits2Parser.CLOSE_PAREN, 0)

        def number(self):
            return self.getTypedRuleContext(udunits2Parser.NumberContext, 0)

        def getRuleIndex(self):
            return udunits2Parser.RULE_basic_spec

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBasic_spec"):
                return visitor.visitBasic_spec(self)
            else:
                return visitor.visitChildren(self)

    def basic_spec(self):
        localctx = udunits2Parser.Basic_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_basic_spec)
        try:
            self.state = 99
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [16]:
                self.enterOuterAlt(localctx, 1)
                self.state = 93
                self.match(udunits2Parser.ID)
                pass
            elif token in [6]:
                self.enterOuterAlt(localctx, 2)
                self.state = 94
                self.match(udunits2Parser.OPEN_PAREN)
                self.state = 95
                self.shift_spec()
                self.state = 96
                self.match(udunits2Parser.CLOSE_PAREN)
                pass
            elif token in [1, 9, 11]:
                self.enterOuterAlt(localctx, 3)
                self.state = 98
                self.number()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IntegerContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT(self):
            return self.getToken(udunits2Parser.INT, 0)

        def SIGNED_INT(self):
            return self.getToken(udunits2Parser.SIGNED_INT, 0)

        def getRuleIndex(self):
            return udunits2Parser.RULE_integer

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitInteger"):
                return visitor.visitInteger(self)
            else:
                return visitor.visitChildren(self)

    def integer(self):
        localctx = udunits2Parser.IntegerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_integer)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 101
            _la = self._input.LA(1)
            if not (_la == 1 or _la == 9):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NumberContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integer(self):
            return self.getTypedRuleContext(udunits2Parser.IntegerContext, 0)

        def FLOAT(self):
            return self.getToken(udunits2Parser.FLOAT, 0)

        def getRuleIndex(self):
            return udunits2Parser.RULE_number

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNumber"):
                return visitor.visitNumber(self)
            else:
                return visitor.visitChildren(self)

    def number(self):
        localctx = udunits2Parser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_number)
        try:
            self.state = 105
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 9]:
                self.enterOuterAlt(localctx, 1)
                self.state = 103
                self.integer()
                pass
            elif token in [11]:
                self.enterOuterAlt(localctx, 2)
                self.state = 104
                self.match(udunits2Parser.FLOAT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TimestampContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE(self):
            return self.getToken(udunits2Parser.DATE, 0)

        def integer(self):
            return self.getTypedRuleContext(udunits2Parser.IntegerContext, 0)

        def signed_clock(self):
            return self.getTypedRuleContext(udunits2Parser.Signed_clockContext, 0)

        def WS(self, i: int = None):
            if i is None:
                return self.getTokens(udunits2Parser.WS)
            else:
                return self.getToken(udunits2Parser.WS, i)

        def T(self):
            return self.getToken(udunits2Parser.T, 0)

        def timezone_offset(self):
            return self.getTypedRuleContext(udunits2Parser.Timezone_offsetContext, 0)

        def TIMEZONE(self):
            return self.getToken(udunits2Parser.TIMEZONE, 0)

        def TIMESTAMP(self):
            return self.getToken(udunits2Parser.TIMESTAMP, 0)

        def TZ(self):
            return self.getToken(udunits2Parser.TZ, 0)

        def getRuleIndex(self):
            return udunits2Parser.RULE_timestamp

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTimestamp"):
                return visitor.visitTimestamp(self)
            else:
                return visitor.visitChildren(self)

    def timestamp(self):
        localctx = udunits2Parser.TimestampContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_timestamp)
        self._la = 0  # Token type
        try:
            self.state = 147
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 23, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 109
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [25]:
                    self.state = 107
                    self.match(udunits2Parser.DATE)
                    pass
                elif token in [1, 9]:
                    self.state = 108
                    self.integer()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 113
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [25]:
                    self.state = 111
                    self.match(udunits2Parser.DATE)
                    pass
                elif token in [1, 9]:
                    self.state = 112
                    self.integer()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 116
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 18 or _la == 26:
                    self.state = 115
                    _la = self._input.LA(1)
                    if not (_la == 18 or _la == 26):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                self.state = 118
                self.signed_clock()

                self.state = 120
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 18:
                    self.state = 119
                    self.match(udunits2Parser.WS)

                self.state = 124
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1, 9, 23]:
                    self.state = 122
                    self.timezone_offset()
                    pass
                elif token in [20]:
                    self.state = 123
                    self.match(udunits2Parser.TIMEZONE)
                    pass
                elif token in [-1, 7]:
                    pass
                else:
                    pass
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 126
                self.integer()
                self.state = 129
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1, 9, 23]:
                    self.state = 127
                    self.timezone_offset()
                    pass
                elif token in [20]:
                    self.state = 128
                    self.match(udunits2Parser.TIMEZONE)
                    pass
                elif token in [-1, 7]:
                    pass
                else:
                    pass
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 131
                self.match(udunits2Parser.TIMESTAMP)
                self.state = 133
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 18:
                    self.state = 132
                    self.match(udunits2Parser.WS)

                self.state = 137
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1, 9, 23]:
                    self.state = 135
                    self.timezone_offset()
                    pass
                elif token in [20]:
                    self.state = 136
                    self.match(udunits2Parser.TIMEZONE)
                    pass
                elif token in [-1, 7]:
                    pass
                else:
                    pass
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 141
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [25]:
                    self.state = 139
                    self.match(udunits2Parser.DATE)
                    pass
                elif token in [1, 9]:
                    self.state = 140
                    self.integer()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 144
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 18:
                    self.state = 143
                    self.match(udunits2Parser.WS)

                self.state = 146
                _la = self._input.LA(1)
                if not (_la == 20 or _la == 21):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Signed_clockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HOUR_MINUTE_SECOND(self):
            return self.getToken(udunits2Parser.HOUR_MINUTE_SECOND, 0)

        def HOUR_MINUTE(self):
            return self.getToken(udunits2Parser.HOUR_MINUTE, 0)

        def integer(self):
            return self.getTypedRuleContext(udunits2Parser.IntegerContext, 0)

        def getRuleIndex(self):
            return udunits2Parser.RULE_signed_clock

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSigned_clock"):
                return visitor.visitSigned_clock(self)
            else:
                return visitor.visitChildren(self)

    def signed_clock(self):
        localctx = udunits2Parser.Signed_clockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_signed_clock)
        try:
            self.state = 152
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [22]:
                self.enterOuterAlt(localctx, 1)
                self.state = 149
                self.match(udunits2Parser.HOUR_MINUTE_SECOND)
                pass
            elif token in [23]:
                self.enterOuterAlt(localctx, 2)
                self.state = 150
                self.match(udunits2Parser.HOUR_MINUTE)
                pass
            elif token in [1, 9]:
                self.enterOuterAlt(localctx, 3)
                self.state = 151
                self.integer()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Timezone_offsetContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HOUR_MINUTE(self):
            return self.getToken(udunits2Parser.HOUR_MINUTE, 0)

        def integer(self):
            return self.getTypedRuleContext(udunits2Parser.IntegerContext, 0)

        def getRuleIndex(self):
            return udunits2Parser.RULE_timezone_offset

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTimezone_offset"):
                return visitor.visitTimezone_offset(self)
            else:
                return visitor.visitChildren(self)

    def timezone_offset(self):
        localctx = udunits2Parser.Timezone_offsetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_timezone_offset)
        try:
            self.state = 156
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [23]:
                self.enterOuterAlt(localctx, 1)
                self.state = 154
                self.match(udunits2Parser.HOUR_MINUTE)
                pass
            elif token in [1, 9]:
                self.enterOuterAlt(localctx, 2)
                self.state = 155
                self.integer()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    def sempred(self, localctx: RuleContext, ruleIndex: int, predIndex: int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[2] = self.product_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def product_sempred(self, localctx: ProductContext, predIndex: int):
        if predIndex == 0:
            return self.precpred(self._ctx, 4)

        if predIndex == 1:
            return self.precpred(self._ctx, 3)

        if predIndex == 2:
            return self.precpred(self._ctx, 2)

        if predIndex == 3:
            return self.precpred(self._ctx, 1)
